# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import ResourceContainer from "../simple_types/ResourceContainer.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import Resource from "../resources/resource.graphql"
# import Resource from "../resources/resource.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Encounter from "../resources/encounter.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import Period from "../complex_types/period.graphql"
# import Condition from "../resources/condition.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Resource from "../resources/resource.graphql"
# import RiskAssessmentPrediction from "../backbone_elements/backboneElement.graphql"
# import Annotation from "../complex_types/annotation.graphql"

union RiskAssessmentSubject = Patient | Group
union RiskAssessmentPerformer = Practitioner | PractitionerRole | Device
union RiskAssessmentReasonReference = Condition | Observation | DiagnosticReport | DocumentReference


type RiskAssessment {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        basedOn: Resource            
        parent: Resource            
        status: code!            
        method: CodeableConcept            
        code: CodeableConcept            
        subject: RiskAssessmentSubject!            
        encounter: Encounter            
        occurrenceDateTime: dateTime            
        occurrencePeriod: Period            
        condition: Condition            
        performer: RiskAssessmentPerformer            
        reasonCode: [CodeableConcept]            
        reasonReference: [RiskAssessmentReasonReference]            
        basis: [Resource]            
        prediction: [BackboneElement]            
        mitigation: String            
        note: [Annotation]            
}

extend type Query {
    riskAssessment(id: String): [RiskAssessment]
}