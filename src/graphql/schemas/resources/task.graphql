# This file is auto-generated by generate_classes so do not edit manually
# import code from "../simple_types/code.graphql"
# import Meta from "../complex_types/meta.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import code from "../simple_types/code.graphql"
# import Extension from "../extensions/extension.graphql"
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Resource from "../resources/resource.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import Task from "../resources/task.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import code from "../simple_types/code.graphql"
# import Resource from "../resources/resource.graphql"
# import Resource from "../resources/resource.graphql"
# import Encounter from "../resources/encounter.graphql"
# import Period from "../complex_types/period.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Device from "../resources/device.graphql"
# import Organization from "../resources/organization.graphql"
# import Patient from "../resources/patient.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Organization from "../resources/organization.graphql"
# import CareTeam from "../resources/careTeam.graphql"
# import HealthcareService from "../resources/healthcareService.graphql"
# import Patient from "../resources/patient.graphql"
# import Device from "../resources/device.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Location from "../resources/location.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Resource from "../resources/resource.graphql"
# import Coverage from "../resources/coverage.graphql"
# import ClaimResponse from "../resources/claimResponse.graphql"
# import Annotation from "../complex_types/annotation.graphql"
# import Provenance from "../resources/provenance.graphql"
# import TaskRestriction from "../backbone_elements/taskRestriction.graphql"
# import TaskInput from "../backbone_elements/taskInput.graphql"
# import TaskOutput from "../backbone_elements/taskOutput.graphql"

union TaskRequester = Device | Organization | Patient | Practitioner | PractitionerRole | RelatedPerson
union TaskOwner = Practitioner | PractitionerRole | Organization | CareTeam | HealthcareService | Patient | Device | RelatedPerson
union TaskInsurance = Coverage | ClaimResponse


type Task {
        id_: code            
        meta: Meta            
        implicitRules: code            
        language: code            
        text: Narrative            
        contained: [code]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        instantiatesCanonical: code            
        instantiatesUri: code            
        basedOn: [Resource]            
        groupIdentifier: Identifier            
        partOf: [Task]            
        status: code!            
        statusReason: CodeableConcept            
        businessStatus: CodeableConcept            
        intent: code!            
        priority: code            
        code: CodeableConcept            
        description: code            
        focus: Resource            
        for_: Resource            
        encounter: Encounter            
        executionPeriod: Period            
        authoredOn: code            
        lastModified: code            
        requester: TaskRequester            
        performerType: [CodeableConcept]            
        owner: TaskOwner            
        location: Location            
        reasonCode: CodeableConcept            
        reasonReference: Resource            
        insurance: [TaskInsurance]            
        note: [Annotation]            
        relevantHistory: [Provenance]            
        restriction: TaskRestriction            
        input: [TaskInput]            
        output: [TaskOutput]            
}

extend type Query {
    task(id: String): [Task]
}