# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/Meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/Narrative.graphql"
# import ResourceContainer from "../simple_types/ResourceContainer.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Identifier from "../complex_types/Identifier.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import DiagnosticReportStatus from "../simple_types/DiagnosticReportStatus.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import Period from "../complex_types/Period.graphql"
# import instant from "../simple_types/instant.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import DiagnosticReportMedia from "../backbone_elements/DiagnosticReportMedia.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import Attachment from "../complex_types/Attachment.graphql"

union DiagnosticReportBasedOn = CarePlan | ImmunizationRecommendation | MedicationRequest | NutritionOrder | ServiceRequest
union DiagnosticReportSubject = Patient | Group | Device | Location
union DiagnosticReportPerformer = Practitioner | PractitionerRole | Organization | CareTeam
union DiagnosticReportResultsInterpreter = Practitioner | PractitionerRole | Organization | CareTeam


type DiagnosticReport {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        basedOn: [DiagnosticReportBasedOn]            
        status: code!            
        category: [CodeableConcept]            
        code: CodeableConcept!            
        subject: DiagnosticReportSubject            
        encounter: Encounter            
        effectiveDateTime: dateTime            
        effectivePeriod: Period            
        issued: instant            
        performer: [DiagnosticReportPerformer]            
        resultsInterpreter: [DiagnosticReportResultsInterpreter]            
        specimen: [Specimen]            
        result: [Observation]            
        imagingStudy: [ImagingStudy]            
        media: [DiagnosticReportMedia]            
        conclusion: String            
        conclusionCode: [CodeableConcept]            
        presentedForm: [Attachment]            
}

extend type Query {
    diagnosticReport(id: String): [DiagnosticReport]
}