# This file is auto-generated by generate_classes so do not edit manually
# import id from "complex_types/id.graphql"
# import Meta from "complex_types/meta.graphql"
# import uri from "complex_types/uri.graphql"
# import code from "complex_types/code.graphql"
# import Narrative from "complex_types/narrative.graphql"
# import ResourceContainer from "complex_types/resource_container.graphql"
# import Extension from "extensions/extension.graphql"
# import Extension from "extensions/extension.graphql"
# import Identifier from "complex_types/identifier.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Period from "complex_types/period.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import DiagnosticReportMedia from "backbone_elements/diagnostic_report_media.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import Attachment from "complex_types/attachment.graphql"

union DiagnosticReportBasedOn = CarePlan | ImmunizationRecommendation | MedicationRequest | NutritionOrder | ServiceRequestunion DiagnosticReportSubject = Patient | Group | Device | Locationunion DiagnosticReportPerformer = Practitioner | PractitionerRole | Organization | CareTeamunion DiagnosticReportResultsInterpreter = Practitioner | PractitionerRole | Organization | CareTeam

type DiagnosticReport {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        basedOn: [DiagnosticReportBasedOn]            
        status: code!            
        category: [CodeableConcept]            
        code: CodeableConcept!            
        subject: DiagnosticReportSubject            
        encounter: Encounter            
        effectiveDateTime: dateTime            
        effectivePeriod: Period            
        issued: instant            
        performer: [DiagnosticReportPerformer]            
        resultsInterpreter: [DiagnosticReportResultsInterpreter]            
        specimen: [Specimen]            
        result: [Observation]            
        imagingStudy: [ImagingStudy]            
        media: [DiagnosticReportMedia]            
        conclusion: String            
        conclusionCode: [CodeableConcept]            
        presentedForm: [Attachment]            
}

extend type Query {
    diagnosticReport(id: String): [DiagnosticReport]
}