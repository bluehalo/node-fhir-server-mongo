# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/Meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/Narrative.graphql"
# import ResourceContainer from "../simple_types/ResourceContainer.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Identifier from "../complex_types/Identifier.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import CodeableConcept from "../complex_types/CodeableConcept.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import Age from "../simple_types/Age.graphql"
# import Period from "../complex_types/Period.graphql"
# import Range from "../complex_types/Range.graphql"
# import string from "../simple_types/string.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import Age from "../simple_types/Age.graphql"
# import Period from "../complex_types/Period.graphql"
# import Range from "../complex_types/Range.graphql"
# import string from "../simple_types/string.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import ConditionStage from "../backbone_elements/ConditionStage.graphql"
# import ConditionEvidence from "../backbone_elements/ConditionEvidence.graphql"
# import Annotation from "../complex_types/Annotation.graphql"

union ConditionSubject = Patient | Group
union ConditionRecorder = Practitioner | PractitionerRole | Patient | RelatedPerson
union ConditionAsserter = Practitioner | PractitionerRole | Patient | RelatedPerson


type Condition {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        clinicalStatus: CodeableConcept            
        verificationStatus: CodeableConcept            
        category: [CodeableConcept]            
        severity: CodeableConcept            
        code: CodeableConcept            
        bodySite: [CodeableConcept]            
        subject: ConditionSubject!            
        encounter: Encounter            
        onsetDateTime: dateTime            
        onsetAge: Age            
        onsetPeriod: Period            
        onsetRange: Range            
        onsetString: String            
        abatementDateTime: dateTime            
        abatementAge: Age            
        abatementPeriod: Period            
        abatementRange: Range            
        abatementString: String            
        recordedDate: dateTime            
        recorder: ConditionRecorder            
        asserter: ConditionAsserter            
        stage: [ConditionStage]            
        evidence: [ConditionEvidence]            
        note: [Annotation]            
}

extend type Query {
    condition(id: String): [Condition]
}