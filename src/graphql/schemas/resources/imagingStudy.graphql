# This file is auto-generated by generate_classes so do not edit manually
# import code from "../simple_types/code.graphql"
# import Meta from "../complex_types/meta.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import code from "../simple_types/code.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import code from "../simple_types/code.graphql"
# import Coding from "../complex_types/coding.graphql"
# import Patient from "../resources/patient.graphql"
# import Device from "../resources/device.graphql"
# import Group from "../resources/group.graphql"
# import Encounter from "../resources/encounter.graphql"
# import code from "../simple_types/code.graphql"
# import CarePlan from "../resources/carePlan.graphql"
# import ServiceRequest from "../resources/serviceRequest.graphql"
# import Appointment from "../resources/appointment.graphql"
# import AppointmentResponse from "../resources/appointmentResponse.graphql"
# import Task from "../resources/task.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Endpoint from "../resources/endpoint.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Procedure from "../resources/procedure.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Location from "../resources/location.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Condition from "../resources/condition.graphql"
# import Observation from "../resources/observation.graphql"
# import Media from "../resources/media.graphql"
# import DiagnosticReport from "../resources/diagnosticReport.graphql"
# import DocumentReference from "../resources/documentReference.graphql"
# import Annotation from "../complex_types/annotation.graphql"
# import code from "../simple_types/code.graphql"
# import ImagingStudySeries from "../backbone_elements/backboneElement.graphql"

union ImagingStudySubject = Patient | Device | Group
union ImagingStudyBasedOn = CarePlan | ServiceRequest | Appointment | AppointmentResponse | Task
union ImagingStudyReferrer = Practitioner | PractitionerRole
union ImagingStudyInterpreter = Practitioner | PractitionerRole
union ImagingStudyReasonReference = Condition | Observation | Media | DiagnosticReport | DocumentReference


type ImagingStudy {
        id_: code            
        meta: Meta            
        implicitRules: code            
        language: code            
        text: Narrative            
        contained: [code]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        status: code!            
        modality: [Coding]            
        subject: ImagingStudySubject!            
        encounter: Encounter            
        started: code            
        basedOn: [ImagingStudyBasedOn]            
        referrer: ImagingStudyReferrer            
        interpreter: [ImagingStudyInterpreter]            
        endpoint: [Endpoint]            
        numberOfSeries: code            
        numberOfInstances: code            
        procedureReference: Procedure            
        procedureCode: [CodeableConcept]            
        location: Location            
        reasonCode: [CodeableConcept]            
        reasonReference: [ImagingStudyReasonReference]            
        note: [Annotation]            
        description: code            
        series: [BackboneElement]            
}

extend type Query {
    imagingStudy(id: String): [ImagingStudy]
}