# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import ResourceContainer from "../simple_types/ResourceContainer.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import canonical from "../simple_types/canonical.graphql"
# import uri from "../simple_types/uri.graphql"
# import Resource from "../resources/resource.graphql"
# import Resource from "../resources/resource.graphql"
# import Communication from "../resources/communication.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Resource from "../resources/resource.graphql"
# import Encounter from "../resources/encounter.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CommunicationPayload from "../backbone_elements/backboneElement.graphql"
# import Annotation from "../complex_types/annotation.graphql"

union CommunicationSubject = Patient | Group
union CommunicationRecipient = Device | Organization | Patient | Practitioner | PractitionerRole | RelatedPerson | Group | CareTeam | HealthcareService
union CommunicationSender = Device | Organization | Patient | Practitioner | PractitionerRole | RelatedPerson | HealthcareService
union CommunicationReasonReference = Condition | Observation | DiagnosticReport | DocumentReference


type Communication {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        instantiatesCanonical: [canonical]            
        instantiatesUri: [uri]            
        basedOn: [Resource]            
        partOf: [Resource]            
        inResponseTo: [Communication]            
        status: code!            
        statusReason: CodeableConcept            
        category: [CodeableConcept]            
        priority: code            
        medium: [CodeableConcept]            
        subject: CommunicationSubject            
        topic: CodeableConcept            
        about: [Resource]            
        encounter: Encounter            
        sent: dateTime            
        received: dateTime            
        recipient: [CommunicationRecipient]            
        sender: CommunicationSender            
        reasonCode: [CodeableConcept]            
        reasonReference: [CommunicationReasonReference]            
        payload: [BackboneElement]            
        note: [Annotation]            
}

extend type Query {
    communication(id: String): [Communication]
}