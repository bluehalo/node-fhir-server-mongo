# This file is auto-generated by generate_classes so do not edit manually
# import id from "complex_types/id.graphql"
# import Meta from "complex_types/meta.graphql"
# import uri from "complex_types/uri.graphql"
# import code from "complex_types/code.graphql"
# import Narrative from "complex_types/narrative.graphql"
# import ResourceContainer from "complex_types/resource_container.graphql"
# import Extension from "extensions/extension.graphql"
# import Extension from "extensions/extension.graphql"
# import Identifier from "complex_types/identifier.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import vConfidentialityClassification from "complex_types/v_confidentiality_classification.graphql"
# import CompositionAttester from "backbone_elements/composition_attester.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import CompositionRelatesTo from "backbone_elements/composition_relates_to.graphql"
# import CompositionEvent from "backbone_elements/composition_event.graphql"
# import CompositionSection from "backbone_elements/composition_section.graphql"

union CompositionAuthor = Practitioner | PractitionerRole | Device | Patient | RelatedPerson | Organization

type Composition {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: Identifier            
        status: code!            
        type_: CodeableConcept!            
        category: [CodeableConcept]            
        subject: Resource            
        encounter: Encounter            
        date: dateTime!            
        author: [CompositionAuthor]!            
        title: String!            
        confidentiality: vConfidentialityClassification            
        attester: [CompositionAttester]            
        custodian: Organization            
        relatesTo: [CompositionRelatesTo]            
        event: [CompositionEvent]            
        section: [CompositionSection]            
}

extend type Query {
    composition(id: String): [Composition]
}