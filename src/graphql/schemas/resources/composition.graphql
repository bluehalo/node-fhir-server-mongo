# This file is auto-generated by generate_classes so do not edit manually
# import code from "../simple_types/code.graphql"
# import Meta from "../complex_types/meta.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import code from "../simple_types/code.graphql"
# import Extension from "../extensions/extension.graphql"
# import Extension from "../extensions/extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Resource from "../resources/resource.graphql"
# import Encounter from "../resources/encounter.graphql"
# import code from "../simple_types/code.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Device from "../resources/device.graphql"
# import Patient from "../resources/patient.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Organization from "../resources/organization.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import CompositionAttester from "../backbone_elements/compositionAttester.graphql"
# import Organization from "../resources/organization.graphql"
# import CompositionRelatesTo from "../backbone_elements/compositionRelatesTo.graphql"
# import CompositionEvent from "../backbone_elements/compositionEvent.graphql"
# import CompositionSection from "../backbone_elements/compositionSection.graphql"

union CompositionAuthor = Practitioner | PractitionerRole | Device | Patient | RelatedPerson | Organization


type Composition {
        id: code            
        meta: Meta            
        implicitRules: code            
        language: code            
        text: Narrative            
        contained: [code]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: Identifier            
        status: code!            
        type: CodeableConcept!            
        category: [CodeableConcept]            
        subject: Resource            
        encounter: Encounter            
        date: code!            
        author: [CompositionAuthor]!            
        title: code!            
        confidentiality: code            
        attester: [CompositionAttester]            
        custodian: Organization            
        relatesTo: [CompositionRelatesTo]            
        event: [CompositionEvent]            
        section: [CompositionSection]            
}

extend type Query {
    composition(id: String): [Composition]
}