# This file is auto-generated by generate_classes so do not edit manually
# import id from "../simple_types/id.graphql"
# import Meta from "../complex_types/meta.graphql"
# import uri from "../simple_types/uri.graphql"
# import code from "../simple_types/code.graphql"
# import Narrative from "../complex_types/narrative.graphql"
# import ResourceContainer from "../simple_types/ResourceContainer.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Identifier from "../complex_types/identifier.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Resource from "../resources/resource.graphql"
# import Encounter from "../resources/encounter.graphql"
# import dateTime from "../simple_types/dateTime.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Device from "../resources/device.graphql"
# import Patient from "../resources/patient.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Organization from "../resources/organization.graphql"
# import vConfidentialityClassification from "../simple_types/vConfidentialityClassification.graphql"
# import CompositionAttester from "../backbone_elements/backboneElement.graphql"
# import Organization from "../resources/organization.graphql"
# import CompositionRelatesTo from "../backbone_elements/backboneElement.graphql"
# import CompositionEvent from "../backbone_elements/backboneElement.graphql"
# import CompositionSection from "../backbone_elements/backboneElement.graphql"

union CompositionAuthor = Practitioner | PractitionerRole | Device | Patient | RelatedPerson | Organization


type Composition {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: Identifier            
        status: code!            
        type_: CodeableConcept!            
        category: [CodeableConcept]            
        subject: Resource            
        encounter: Encounter            
        date: dateTime!            
        author: [CompositionAuthor]!            
        title: String!            
        confidentiality: vConfidentialityClassification            
        attester: [BackboneElement]            
        custodian: Organization            
        relatesTo: [BackboneElement]            
        event: [BackboneElement]            
        section: [BackboneElement]            
}

extend type Query {
    composition(id: String): [Composition]
}