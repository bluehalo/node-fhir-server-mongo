# This file is auto-generated by generate_classes so do not edit manually
# import id from "complex_types/id.graphql"
# import Meta from "complex_types/meta.graphql"
# import uri from "complex_types/uri.graphql"
# import code from "complex_types/code.graphql"
# import Narrative from "complex_types/narrative.graphql"
# import ResourceContainer from "complex_types/resource_container.graphql"
# import Extension from "extensions/extension.graphql"
# import Extension from "extensions/extension.graphql"
# import Identifier from "complex_types/identifier.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "complex_types/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import Reference from "resources/reference.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"
# import Annotation from "complex_types/annotation.graphql"
# import ListEntry from "backbone_elements/list_entry.graphql"
# import CodeableConcept from "complex_types/codeable_concept.graphql"

union ListSubject = Patient | Group | Device | Locationunion ListSource = Practitioner | PractitionerRole | Patient | Device

type List {
        id_: id            
        meta: Meta            
        implicitRules: uri            
        language: code            
        text: Narrative            
        contained: [ResourceContainer]            
        extension: [Extension]            
        modifierExtension: [Extension]            
        identifier: [Identifier]            
        status: code!            
        mode: code!            
        title: String            
        code: CodeableConcept            
        subject: ListSubject            
        encounter: Encounter            
        date: dateTime            
        source: ListSource            
        orderedBy: CodeableConcept            
        note: [Annotation]            
        entry: [ListEntry]            
        emptyReason: CodeableConcept            
}

extend type Query {
    list(id: String): [List]
}