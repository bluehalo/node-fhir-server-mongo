# This file is auto-generated by generate_classes so do not edit manually
# import string from "../simple_types/string.graphql"
# import Extension from "../extensions/Extension.graphql"
# import Coding from "../complex_types/Coding.graphql"
# import instant from "../simple_types/instant.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../complex_types/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import Reference from "../resources/Reference.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import base64Binary from "../simple_types/base64Binary.graphql"

union SignatureWho = Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization
union SignatureOnBehalfOf = Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization


type Signature {
        id_: String            
        extension: [Extension]            
        type_: [Coding]!            
        when: instant!            
        who: SignatureWho!            
        onBehalfOf: SignatureOnBehalfOf            
        targetFormat: code            
        sigFormat: code            
        data: base64Binary            
}

extend type Query {
    signature(id: String): [Signature]
}