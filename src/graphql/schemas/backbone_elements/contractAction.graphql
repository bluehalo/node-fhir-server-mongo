# This file is auto-generated by generate_classes so do not edit manually
# import code from "../simple_types/code.graphql"
# import Extension from "../extensions/extension.graphql"
# import Extension from "../extensions/extension.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import ContractSubject from "../backbone_elements/contractSubject.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Encounter from "../resources/encounter.graphql"
# import EpisodeOfCare from "../resources/episodeOfCare.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Period from "../complex_types/period.graphql"
# import Timing from "../backbone_elements/timing.graphql"
# import Patient from "../resources/patient.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import Device from "../resources/device.graphql"
# import Group from "../resources/group.graphql"
# import Organization from "../resources/organization.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import RelatedPerson from "../resources/relatedPerson.graphql"
# import Patient from "../resources/patient.graphql"
# import Practitioner from "../resources/practitioner.graphql"
# import PractitionerRole from "../resources/practitionerRole.graphql"
# import CareTeam from "../resources/careTeam.graphql"
# import Device from "../resources/device.graphql"
# import Substance from "../resources/substance.graphql"
# import Organization from "../resources/organization.graphql"
# import Location from "../resources/location.graphql"
# import code from "../simple_types/code.graphql"
# import CodeableConcept from "../complex_types/codeableConcept.graphql"
# import Condition from "../resources/condition.graphql"
# import Observation from "../resources/observation.graphql"
# import DiagnosticReport from "../resources/diagnosticReport.graphql"
# import DocumentReference from "../resources/documentReference.graphql"
# import Questionnaire from "../resources/questionnaire.graphql"
# import QuestionnaireResponse from "../resources/questionnaireResponse.graphql"
# import code from "../simple_types/code.graphql"
# import code from "../simple_types/code.graphql"
# import Annotation from "../complex_types/annotation.graphql"
# import code from "../simple_types/code.graphql"

union ContractActionContext = Encounter | EpisodeOfCare
union ContractActionRequester = Patient | RelatedPerson | Practitioner | PractitionerRole | Device | Group | Organization
union ContractActionPerformer = RelatedPerson | Patient | Practitioner | PractitionerRole | CareTeam | Device | Substance | Organization | Location
union ContractActionReasonReference = Condition | Observation | DiagnosticReport | DocumentReference | Questionnaire | QuestionnaireResponse


type ContractAction {
    id: code        
    extension: [Extension]        
    modifierExtension: [Extension]        
    doNotPerform: code        
    type: CodeableConcept!        
    subject: [ContractSubject]        
    intent: CodeableConcept!        
    linkId: [code]        
    status: CodeableConcept!        
    context: ContractActionContext        
    contextLinkId: [code]        
    occurrenceDateTime: code        
    occurrencePeriod: Period        
    occurrenceTiming: Timing        
    requester: [ContractActionRequester]        
    requesterLinkId: [code]        
    performerType: [CodeableConcept]        
    performerRole: CodeableConcept        
    performer: ContractActionPerformer        
    performerLinkId: [code]        
    reasonCode: [CodeableConcept]        
    reasonReference: [ContractActionReasonReference]        
    reason: [code]        
    reasonLinkId: [code]        
    note: [Annotation]        
    securityLabelNumber: [code]        
}

extend type Query {
    contractAction(id: String): [ContractAction]
}