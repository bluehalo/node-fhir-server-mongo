// This code is generated by a code generator.  Do not edit.
const {resolveType, findResourcesByReference, findResourceByReference, getResources} = require('../../common');

// noinspection JSUnusedLocalSymbols
module.exports = {
    Query: {
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        coverageEligibilityRequest: async (parent, args, context, info) => {
            return await getResources(
                parent,
                args,
                context,
                info,
                'CoverageEligibilityRequest'
            );
        }
    },
    CoverageEligibilityRequestEnterer: {
        __resolveType(obj, context, info) {
            return resolveType(obj, context, info);
        },
    },
    CoverageEligibilityRequestProvider: {
        __resolveType(obj, context, info) {
            return resolveType(obj, context, info);
        },
    },
    CoverageEligibilityRequest: {
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        patient: async (parent, args, context, info) => {
            return await findResourceByReference(parent.patient);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        enterer: async (parent, args, context, info) => {
            return await findResourceByReference(parent.enterer);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        provider: async (parent, args, context, info) => {
            return await findResourceByReference(parent.provider);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        insurer: async (parent, args, context, info) => {
            return await findResourceByReference(parent.insurer);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        facility: async (parent, args, context, info) => {
            return await findResourceByReference(parent.facility);
        },
    }
};

