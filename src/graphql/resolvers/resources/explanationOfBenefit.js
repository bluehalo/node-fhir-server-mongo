// This code is generated by a code generator.  Do not edit.
const {resolveType, findResourcesByReference, findResourceByReference, getResources} = require('../../common');

// noinspection JSUnusedLocalSymbols
module.exports = {
    Query: {
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        explanationOfBenefit: async (parent, args, context, info) => {
            return await getResources(
                parent,
                args,
                context,
                info,
                'ExplanationOfBenefit'
            );
        }
    },
    ExplanationOfBenefitEnterer: {
        __resolveType(obj, context, info) {
            return resolveType(obj, context, info);
        },
    },
    ExplanationOfBenefitProvider: {
        __resolveType(obj, context, info) {
            return resolveType(obj, context, info);
        },
    },
    ExplanationOfBenefitPrescription: {
        __resolveType(obj, context, info) {
            return resolveType(obj, context, info);
        },
    },
    ExplanationOfBenefit: {
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        patient: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.patient);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        enterer: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.enterer);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        insurer: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.insurer);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        provider: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.provider);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        prescription: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.prescription);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        originalPrescription: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.originalPrescription);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        referral: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.referral);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        facility: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.facility);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        claim: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.claim);
        },
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        claimResponse: async (parent, args, context, info) => {
            return await findResourceByReference(
                args,
                context,
                info,
                parent.claimResponse);
        },
    }
};

