from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType

{% if fhir_entity.properties %}

if TYPE_CHECKING:
    pass
{% endif %}
{% for property in fhir_entity.properties %}
    {% if property.is_resource %}
    from spark_auto_mapper_fhir.resources.{{ property.type_snake_case }} import {{ property.type_ | replace(".","") }}
    {% elif property.is_extension %}
    from spark_auto_mapper_fhir.extensions.{{ property.type_snake_case }} import {{ property.type_ | replace(".","") }}
    {% elif property.fhir_type == "BackboneElement" %}
    from spark_auto_mapper_fhir.backbone_elements.{{ property.type_snake_case }} import {{ property.type_ | replace(".","")}}
    {% elif property.fhir_type == "Element" %}
    from spark_auto_mapper_fhir.complex_types.{{ property.type_snake_case }} import {{ property.type_ | replace(".","")}}
{#    from spark_auto_mapper_fhir.valuesets.{{ property.type_snake_case }} import {{ property.type_ }}#}
{#    from spark_auto_mapper_fhir.fhir_types.{{ property.type_snake_case }} import {{ property.type_ }}#}
    {% endif %}
    {% if property.reference_target_resources %}
    # Imports for References for {{ property.name }}
        {% for reference_target_resource in property.reference_target_resources %}
            {% if reference_target_resource.name != fhir_entity.cleaned_name %}
    from spark_auto_mapper_fhir.resources.{{ reference_target_resource.snake_case_name }} import {{ reference_target_resource.name | replace(".","") }}
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}

# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class {{fhir_entity.cleaned_name}}(GenericTypeCode):
    """
    {{ fhir_entity.fhir_name }}
    From: {{ fhir_entity.value_set_url }} in {{ fhir_entity.source }}
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    {%  endfor %}
    """
    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    {%  if fhir_entity.value_set_url_list %}
        {% if fhir_entity.value_set_url_list|length > 1 %}
            {% for value_set_url in fhir_entity.value_set_url_list %}
    """
    {{ value_set_url }}
    """
    codeset_{{ value_set_url.split("/")[-1].replace("-", "_").replace(":","_").replace(".","_") }}: FhirUri = "{{ value_set_url}}"
            {% endfor %}
        {% else %}
            {% for value_set_url in fhir_entity.value_set_url_list %}
    """
    {{ value_set_url }}
    """
    codeset: FhirUri = "{{ value_set_url }}"
            {% endfor %}
        {% endif %}
    {% endif %}


{%  if fhir_entity.value_set_concepts %}
class {{fhir_entity.cleaned_name}}Values:
    {% for value_set_concept in fhir_entity.value_set_concepts %}
        {% if value_set_concept.definition %}
    """
    {{ value_set_concept.definition | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    From: {{ value_set_concept.value_set_url }} in {{ value_set_concept.source }}
    """
        {% else %}
    """
    From: {{ value_set_concept.value_set_url }} in {{ value_set_concept.source }}
    """
        {% endif %}
        {% if value_set_concept.cleaned_display == fhir_entity.cleaned_name %}
    {{ value_set_concept.cleaned_display }}_ = {{ fhir_entity.cleaned_name }}("{{ value_set_concept.code }}")
        {% else %}
    {{ value_set_concept.cleaned_display }} = {{ fhir_entity.cleaned_name }}("{{ value_set_concept.code }}")
        {%  endif %}
    {%  endfor %}
{% endif %}
