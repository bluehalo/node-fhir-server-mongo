from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.fhir_types.fhir_reference import FhirReference
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

{% if fhir_entity.cleaned_name != "Meta" %}
from spark_auto_mapper_fhir.complex_types.meta import Meta
{% endif %}
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
{% if fhir_entity.cleaned_name in ["BackboneElement"] %}
{% else %}
from spark_fhir_schemas.r4.complex_types.{{ fhir_entity.fhir_name.lower() | replace(".","_") }} import {{ fhir_entity.fhir_name | replace(".","_") }}Schema
{% endif %}

{% if fhir_entity.properties %}

if TYPE_CHECKING:
    pass
{% endif %}
{% for property in fhir_entity.properties %}
    {% if property.type_ | replace(".","") != fhir_entity.cleaned_name %}
    # {{ property.name }} ({{ property.type_ }})
        {% if property.is_code %}
    from spark_auto_mapper_fhir.value_sets.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
        {% elif property.is_basic_type %}
    from spark_auto_mapper_fhir.fhir_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
        {% elif property.is_resource %}
    from spark_auto_mapper_fhir.resources.{{ property.type_snake_case }} import {{ property.type_ | replace(".","") }}
        {% elif property.is_extension %}
    from spark_auto_mapper_fhir.extensions.{{ property.type_snake_case }} import {{ property.type_ | replace(".","") }}
        {% elif property.fhir_type == "BackboneElement" %}
    from spark_auto_mapper_fhir.backbone_elements.{{ property.type_snake_case }} import {{ property.type_ | replace(".","")}}
        {% elif property.fhir_type == "Element" %}
    from spark_auto_mapper_fhir.complex_types.{{ property.type_snake_case }} import {{ property.type_ | replace(".","")}}
        {%  else %}
    from spark_auto_mapper_fhir.complex_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
        {% endif %}
        {% if property.reference_target_resources %}
    # Imports for References for {{ property.name }}
            {% for reference_target_resource in property.reference_target_resources %}
                {% if reference_target_resource.name != fhir_entity.cleaned_name %}
    from spark_auto_mapper_fhir.resources.{{ reference_target_resource.snake_case_name }} import {{ reference_target_resource.name | replace(".","") }}
                {% endif %}
            {% endfor %}
        {% endif %}
        {% if property.codeable_type %}
    # Import for CodeableConcept for {{ property.name }}
    from spark_auto_mapper_fhir.value_sets.{{ property.codeable_type.snake_case_name }} import {{ property.codeable_type.cleaned_name }}
    # End Import for CodeableConcept for {{ property.name }}
        {% endif %}
    {% endif %}
{% endfor %}


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
{% if fhir_entity.cleaned_name == "Reference" %}
from typing import TypeVar, Generic
from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
_T = TypeVar("_T", bound=Union[FhirResourceBase])


class Reference(FhirComplexTypeBase, Generic[_T]):
{% elif fhir_entity.cleaned_name == "CodeableConcept" %}
from typing import TypeVar, Generic
from spark_auto_mapper_fhir.base_types.FhirValueSetBase import FhirValueSetBase
_T = TypeVar("_T", bound=Union[FhirValueSetBase])


class CodeableConcept(FhirComplexTypeBase, Generic[_T]):
{% elif fhir_entity.cleaned_name == "Coding" %}
from typing import TypeVar, Generic
from spark_auto_mapper_fhir.base_types.FhirValueSetBase import FhirValueSetBase
_T = TypeVar("_T", bound=Union[FhirValueSetBase])


class Coding(FhirComplexTypeBase, Generic[_T]):
{% elif fhir_entity.cleaned_name == "Extension" %}
class Extension(ExtensionBase):
{% else %}
class {{fhir_entity.cleaned_name}}(FhirComplexTypeBase):
{% endif %}
    """
    {{fhir_entity.fhir_name}}
    {{ fhir_entity.source }}
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item }}
    {%  endfor %}
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
    {% for property in fhir_entity.properties %}
        {% if fhir_entity.cleaned_name == "CodeableConcept" and property.name == "coding" %}
        coding: Optional[FhirList[Coding[_T]]] = None,
        {% elif fhir_entity.cleaned_name == "Coding" and property.name == "code" %}
        code: Optional[_T] = None,
        {% elif fhir_entity.cleaned_name == "Reference" and property.name == "reference" %}
        reference: Optional[FhirReference] = None,
        {% else %}
        {{ property.name -}} {{ ': ' -}}
            {% if property.optional -%}
                {{ 'Optional[' -}}
            {% endif -%}
            {% if property.is_list -%}
                {{ 'FhirList[' -}}
            {% endif -%}
            {% if property.cleaned_type == "Extension" %}
            {{ 'ExtensionBase' -}}
            {% else %}
            {{ property.cleaned_type | replace(".","") -}}
            {%  endif %}
            {% if property.codeable_type -%}
                [{{ property.codeable_type.cleaned_name -}}]
            {% endif -%}
            {% if property.reference_target_resources -%}
                {% if property.reference_target_resources | length > 1  %}
                [Union[{{ property.reference_target_resources_names | join(", ") -}}]]
                {% else %}
                [{{ property.reference_target_resources_names | join(", ") -}}]
                {%  endif %}
            {% endif -%}
            {% if property.is_list -%}
                {{ ']' -}}
            {% endif -%}
            {% if property.optional -%}
                {{- '] = None,' -}}
            {% else -%}
                {{ ',' -}}
            {% endif %}
        {% endif %}

    {% endfor %}
    ) -> None:
        """
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    {%  endfor %}

    {% for property in fhir_entity.properties %}
        :param {{ property.name }}: {{ property.documentation[0] | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    {% endfor %}
        """
        super().__init__(
        {% for property in fhir_entity.properties %}
            {{ property.name }}={{ property.name }},
        {% endfor %}
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
    {% if fhir_entity.cleaned_name in ["BackboneElement"] %}
        return None
    {% else %}
        return {{ fhir_entity.fhir_name | replace(".","_") }}Schema.get_schema(include_extension=include_extension)
    {% endif %}
