from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
{% if fhir_entity.cleaned_name in ["DomainResource", "Resource"] %}
{% elif fhir_entity.cleaned_name == "List_" %}
from spark_fhir_schemas.r4.resources.list import ListSchema
{% else %}
from spark_fhir_schemas.r4.resources.{{ fhir_entity.cleaned_name.lower() }} import {{ fhir_entity.cleaned_name }}Schema
{% endif %}

if TYPE_CHECKING:
    pass
{% for property in fhir_entity.properties %}
    {% if property.type_ | replace(".","") != fhir_entity.cleaned_name %}
    # {{ property.name }} ({{ property.type_ }})
        {% if property.is_code %}
    from spark_auto_mapper_fhir.value_sets.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
        {% elif property.is_basic_type %}
    from spark_auto_mapper_fhir.fhir_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
        {% elif property.is_resource %}
    from spark_auto_mapper_fhir.resources.{{ property.type_snake_case }} import {{ property.type_ | replace(".","") }}
        {% elif property.is_extension %}
    from spark_auto_mapper_fhir.extensions.{{ property.type_snake_case }} import {{ property.type_ | replace(".","") }}
        {% elif property.fhir_type == "BackboneElement" %}
    from spark_auto_mapper_fhir.backbone_elements.{{ property.type_snake_case }} import {{ property.type_ | replace(".","")}}
        {% elif property.fhir_type == "Element" %}
    from spark_auto_mapper_fhir.complex_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
        {%  else %}
    from spark_auto_mapper_fhir.complex_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}
{#    from spark_auto_mapper_fhir.valuesets.{{ property.type_snake_case }} import {{ property.type_ }}#}
{#    from spark_auto_mapper_fhir.fhir_types.{{ property.type_snake_case }} import {{ property.type_ }}#}
        {% endif %}
        {% if property.reference_target_resources %}
    # Imports for References for {{ property.name }}
            {% for reference_target_resource in property.reference_target_resources %}
                {% if reference_target_resource.name != fhir_entity.cleaned_name %}
    from spark_auto_mapper_fhir.resources.{{ reference_target_resource.snake_case_name }} import {{ reference_target_resource.name | replace(".","") }}
                {% endif %}
            {% endfor %}
        {% endif %}
        {% if property.codeable_type %}
    # Import for CodeableConcept for {{ property.name }}
    from spark_auto_mapper_fhir.value_sets.{{ property.codeable_type.snake_case_name }} import {{ property.codeable_type.cleaned_name }}
    # End Import for CodeableConcept for {{ property.name }}
        {% endif %}
    {% endif %}
{% endfor %}


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class {{fhir_entity.cleaned_name}}(FhirResourceBase):
    """
    {{fhir_entity.fhir_name}}
    {{ fhir_entity.source }}
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    {%  endfor %}
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
    {% for property in fhir_entity.properties %}
        {{ property.name -}} {{ ': ' -}}
            {% if property.optional -%}
                {{ 'Optional[' -}}
            {% endif -%}
            {% if property.is_list -%}
                {{ 'FhirList[' -}}
            {% endif -%}
            {% if property.cleaned_type == "Extension" %}
            {{ 'ExtensionBase' -}}
            {% else %}
            {{ property.cleaned_type | replace(".","") -}}
            {%  endif %}
            {% if property.codeable_type -%}
                [{{ property.codeable_type.cleaned_name -}}]
            {% endif -%}
            {% if property.reference_target_resources -%}
                {% if property.reference_target_resources | length > 1  %}
                [Union[{{ property.reference_target_resources_names | join(", ") -}}]]
                {% else %}
                [{{ property.reference_target_resources_names | join(", ") -}}]
                {%  endif %}
            {% endif -%}
            {% if property.is_list -%}
                {{ ']' -}}
            {% endif -%}
            {% if property.optional -%}
                {{- '] = None,' -}}
            {% else -%}
                {{ ',' -}}
            {% endif %}
    {% endfor %}
    ) -> None:
        """
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ')}}
    {%  endfor %}

    {% for property in fhir_entity.properties %}
        :param {{ property.name }}: {{ property.documentation[0] | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    {% endfor %}
        """
        super().__init__(
            resourceType="{{fhir_entity.cleaned_name}}",
        {% for property in fhir_entity.properties %}
            {{ property.name }}={{ property.name }},
        {% endfor %}
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
{% if fhir_entity.cleaned_name in ["DomainResource", "Resource"] %}
        return None
{% elif fhir_entity.cleaned_name == "List_" %}
        return ListSchema.get_schema(include_extension=include_extension)
{% else %}
        return {{ fhir_entity.cleaned_name }}Schema.get_schema(include_extension=include_extension)
{% endif %}
