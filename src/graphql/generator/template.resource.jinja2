# This file is auto-generated by generate_classes so do not edit manually
{% macro lower_case_first_letter(text) %}
    {{- text[0]|lower}}{{text[1:] -}}
{% endmacro %}
{% macro upper_case_first_letter(text) %}
    {{- text[0]|upper}}{{text[1:] -}}
{% endmacro %}
{% for property in fhir_entity.properties_unique %}
    {% if property.type_ | replace(".","") != fhir_entity.cleaned_name %}
{#    # {{ property.name }} ({{ property.type_ }})#}
        {% if property.is_code %}
# import code from "../simple_types/code.graphql"
{#        {% elif property.is_basic_type %}#}
{#    from spark_auto_mapper_fhir.fhir_types.{{ property.type_snake_case }} import {{ property.cleaned_type | replace(".","")}}#}
        {% elif property.reference_target_resources %}
{#            we replace this with the target resource below#}
        {% elif property.is_resource %}
# import {{ property.type_ | replace(".","") }} from "../resources/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.is_extension %}
# import {{ property.type_ | replace(".","") }} from "../extensions/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.fhir_type == "BackboneElement" %}
# import {{ property.type_ | replace(".","") }} from "../backbone_elements/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.is_complex or property.fhir_type == "Element" %}
# import {{ property.cleaned_type | replace(".","") }} from "../complex_types/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% elif property.type_snake_case in ["string", "boolean", "integer", "positiveInt"] %}
{# do nothing since this is a GraphQL type            #}
        {%  else %}
# import {{ property.type_ | replace(".","") }} from "../simple_types/{{ lower_case_first_letter(property.type_snake_case) }}.graphql"
        {% endif %}
        {% if property.reference_target_resources %}
{## Imports for References for {{ property.name }}#}
            {% for reference_target_resource in property.reference_target_resources %}
# import {{ reference_target_resource.cleaned_name }} from "../resources/{{ lower_case_first_letter(reference_target_resource.cleaned_name) }}.graphql"
            {% endfor %}
        {% endif %}
    {% endif %}
{% endfor %}

{% for property in fhir_entity.properties %}
{% if property.reference_target_resources -%}
    {% if property.reference_target_resources | length > 1  %}
union {{fhir_entity.cleaned_name}}{{ upper_case_first_letter(property.name) }} = {{ property.reference_target_resources_names | unique | join(" | ") }}
    {%  endif %}
{% endif -%}
{% endfor %}


"""
{{fhir_entity.fhir_name}}
{% for documentation_item in fhir_entity.documentation %}
    {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
{%  endfor %}
"""
type {{fhir_entity.cleaned_name}} {
    resourceType: String
{% for property in fhir_entity.properties %}
    """
    {{ property.documentation[0] | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    """
    {{ property.name -}} {{ ': ' -}}
        {% if property.is_list -%}
            {{ '[' -}}
        {% endif -%}
        {% if property.cleaned_type == "Extension" %}
        {{- 'Extension' -}}
        {% elif property.is_code %}
        {{- 'code' -}}
        {% elif property.reference_target_resources -%}
            {% if property.reference_target_resources | length > 1  %}
            {{- fhir_entity.cleaned_name}}{{ upper_case_first_letter(property.name) -}}
            {% else %}
            {{- property.reference_target_resources_names [0] -}}
            {%  endif %}
        {% else %}
        {{- property.cleaned_type | replace(".","") -}}
        {%  endif %}
        {% if property.is_list -%}
            {{ ']' -}}
        {% endif -%}
        {% if not property.optional -%}
            {{- '!' -}}
        {% else -%}
            {{ '' -}}
        {% endif %}
        {{ '' }}
{% endfor %}
}

extend type Query {
    """
    {{fhir_entity.fhir_name}}
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item | wordwrap(78) | replace('\n', '\n    ') | replace('\r', '\n    ') }}
    {%  endfor %}
    """
    {{  lower_case_first_letter(fhir_entity.cleaned_name) }}(
        """
        list of ids to retrieve
        """
        id: [String]
        type: String
        """
        search by name
        """
        name: String
        """
        search by family name
        """
        family: String
        """
        filter to records with the specified identifier (system|value) e.g., http://hl7.org/fhir/sid/us-npi|1487831681
        """
        identifier: String
        """
        filter to records with this source
        """
        source: String
        """
        filter to records with the specified security tags (system|value) e.g., https://www.icanbwell.com/access|somehealth
        https://www.icanbwell.com/{access/owner/vendor}|{value}
        """
        _security: String
        """
        filter to records with the specified tags (system|value) e.g., https://www.icanbwell.com/access|somehealth
        https://www.icanbwell.com/{access/owner/vendor}|{value}
        """
        _tag: String
        """
        filter to records with the specified version
        """
        versionId: String
        """
        filter to records with the specified last updated date time.  You can use:
            gt: greater than
            gte: greater than or equal to
            lt: less than
            lte: less than or equal to

            Example: gt2021-01-18
            Range: ["gt2021-01-18", "lt2021-01-17"]
        """
        _lastUpdated: [String]
        """
        filter to records related to the specified patient
        """
        patient: String
        """
        filter to records related to the specified patient id
        """
        practitioner: String
        """
        filter to records related to the specified organization id
        """
        organization: String
        """
        filter to records related to the specified location id
        """
        location: String
        """
        filter to records related to the specified agent id
        """
        agent: String
        """
        filter to records related to the specified healthcareService id
        """
        healthcareService: String
        """
        filter to active records
        """
        active: Boolean
        """
        return total number of records that meet this query
        """
        _total: TotalType
        """
        sort records by these fields.  The fields can be nested fields. Prepend with "-" to indicate descending sort
            Examples: ["id", "-meta.lastUpdated"]
        """
        _sort: [String]
        """
        limit records to this count.  Default is 10
        """
        _count: Int
        """
        page number to retrieve
        """
        _getpagesoffset: Int
    ): [{{ fhir_entity.cleaned_name }}]
}
