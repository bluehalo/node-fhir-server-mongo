{% macro lower_case_first_letter(text) %}
    {{- text[0]|lower}}{{text[1:] -}}
{% endmacro %}
{% macro upper_case_first_letter(text) %}
    {{- text[0]|upper}}{{text[1:] -}}
{% endmacro %}
// This code is generated by a code generator.  Do not edit.
const {resolveType, findResourcesByReference, findResourceByReference, getResources} = require('../../common');

// noinspection JSUnusedLocalSymbols
module.exports = {
    Query: {
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        {{ lower_case_first_letter(fhir_entity.cleaned_name) -}}: async (parent, args, context, info) => {
            return await getResources(
                parent,
                args,
                context,
                info,
                '{{ fhir_entity.cleaned_name }}'
            );
        }
    },
{% for property in fhir_entity.properties %}
{% if property.reference_target_resources -%}
    {% if property.reference_target_resources | length > 1  %}
    {{fhir_entity.cleaned_name}}{{ upper_case_first_letter(property.name) }}: {
        __resolveType(obj, context, info) {
            return resolveType(obj, context, info);
        },
    },
    {%  endif %}
{% endif -%}
{% endfor %}
    {{  fhir_entity.cleaned_name }}: {
    {% for property in fhir_entity.properties %}
        {% if property.reference_target_resources %}
        // noinspection JSUnusedLocalSymbols
        // eslint-disable-next-line no-unused-vars
        {{ property.name -}}: async (parent, args, context, info) => {
            {% if property.is_list %}
            return await findResourcesByReference(
                args,
                context,
                info,
                parent.{{ property.name -}}
            );
            {% else %}
            return await findResourceByReference(
                args,
                context,
                info,
                parent.{{ property.name -}}
            );
            {%  endif %}
        },
        {%  endif %}
    {% endfor %}
    }
};


