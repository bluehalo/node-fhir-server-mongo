# This file is auto-generated by generate_classes so do not edit manually
# import MessageHeader from "../resources/messageHeader.graphql"

extend type Query {
    """
    MessageHeader
        The header for a message exchange that is either requesting or responding to
    an action.  The reference(s) that are the subject of the action as well as
    other information related to the action are typically transmitted in a bundle
    in which the MessageHeader resource instance is the first resource in the
    bundle.
        If the element is present, it must have either a @value, an @id, or extensions
    """
    messageHeader(

        # some old search parameters that we misspelled in the past so have to maintain backwards compatibility
        """
        list of ids to retrieve.  DEPRECATED: Use `_id`
        """
        id: [String]

        # search parameters for all resources
        """
        _id (FHIR type: token)
        Logical id of this artifact
        """
        _id: SearchString
        """
        _lastUpdated (FHIR type: date)
        When the resource version last changed
        """
        _lastUpdated: SearchDate
        """
        _profile (FHIR type: uri)
        Profiles this resource claims to conform to
        """
        _profile: SearchString
        """
        _security (FHIR type: token)
        Security Labels applied to this resource
        """
        _security: SearchToken
        """
        _source (FHIR type: uri)
        Identifies where the resource comes from
        """
        _source: SearchString
        """
        _tag (FHIR type: token)
        Tags applied to this resource
        """
        _tag: SearchToken

        # search parameters for MessageHeader
        """
        author (FHIR type: reference)
        The source of the decision
        """
        author: SearchReference
        """
        code (FHIR type: token)
        ok | transient-error | fatal-error
        """
        code: SearchToken
        """
        destination (FHIR type: string)
        Name of system
        """
        destination: SearchString
        """
        destination-uri (FHIR type: uri)
        Actual destination address or id
        """
        destination_uri: SearchString
        """
        enterer (FHIR type: reference)
        The source of the data entry
        """
        enterer: SearchReference
        """
        event (FHIR type: token)
        Code for the event this message represents or link to event definition
        """
        event: SearchToken
        """
        focus (FHIR type: reference)
        The actual content of the message
        """
        focus: SearchReference
        """
        receiver (FHIR type: reference)
        Intended "real-world" recipient for the data
        """
        receiver: SearchReference
        """
        response-id (FHIR type: token)
        Id of original message
        """
        response_id: SearchToken
        """
        responsible (FHIR type: reference)
        Final responsibility for event
        """
        responsible: SearchReference
        """
        sender (FHIR type: reference)
        Real world sender of the message
        """
        sender: SearchReference
        """
        source (FHIR type: string)
        Name of system
        """
        source: SearchString
        """
        source-uri (FHIR type: uri)
        Actual message source address or id
        """
        source_uri: SearchString
        """
        target (FHIR type: reference)
        Particular delivery destination within the destination
        """
        target: SearchReference

        # miscellaneous parameters
        """
        return total number of records that meet this query
        """
        _total: TotalType
        """
        sort records by these fields.  The fields can be nested fields. Prepend with "-" to indicate descending sort
            Examples: ["id", "-meta.lastUpdated"]
        """
        _sort: [String]
        """
        limit records to this count.  Default is 10
        """
        _count: Int
        """
        page number to retrieve
        """
        _getpagesoffset: Int
    ): MessageHeaderBundle
}