# This file is auto-generated by generate_classes so do not edit manually
# import Extension from "../extensions/extension.graphql"
# import code from "../simple_types/code.graphql"
# import canonical from "../simple_types/canonical.graphql"
# import OperationDefinitionBinding from "../backbone_elements/operationDefinitionBinding.graphql"
# import OperationDefinitionReferencedFrom from "../backbone_elements/operationDefinitionReferencedFrom.graphql"


"""
OperationDefinition.Parameter
    A formal computable definition of an operation (on the RESTful interface) or a
    named query (using the search interaction).
"""
type OperationDefinitionParameter {
    """
    None
    """
    id: String        
    """
    May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
    """
    extension: [Extension]        
    """
    May be used to represent additional information that is not part of the basic
    definition of the element and that modifies the understanding of the element
    in which it is contained and/or the understanding of the containing element's
    descendants. Usually modifier elements provide negation or qualification. To
    make the use of extensions safe and manageable, there is a strict set of
    governance applied to the definition and use of extensions. Though any
    implementer can define an extension, there is a set of requirements that SHALL
    be met as part of the definition of the extension. Applications processing a
    resource are required to check for modifier extensions.
    
    Modifier extensions SHALL NOT change the meaning of any elements on Resource
    or DomainResource (including cannot change the meaning of modifierExtension
    itself).
    """
    modifierExtension: [Extension]        
    """
    The name of used to identify the parameter.
    """
    name: code!        
    """
    Whether this is an input or an output parameter.
    """
    use: code!        
    """
    The minimum number of times this parameter SHALL appear in the request or
    response.
    """
    min: Int!        
    """
    The maximum number of times this element is permitted to appear in the request
    or response.
    """
    max: String!        
    """
    Describes the meaning or use of this parameter.
    """
    documentation: String        
    """
    The type for this parameter.
    """
    type: code        
    """
    Used when the type is "Reference" or "canonical", and identifies a profile
    structure or implementation Guide that applies to the target of the reference
    this parameter refers to. If any profiles are specified, then the content must
    conform to at least one of them. The URL can be a local reference - to a
    contained StructureDefinition, or a reference to another StructureDefinition
    or Implementation Guide by a canonical URL. When an implementation guide is
    specified, the target resource SHALL conform to at least one profile defined
    in the implementation guide.
    """
    targetProfile: [canonical]        
    """
    How the parameter is understood as a search parameter. This is only used if
    the parameter type is 'string'.
    """
    searchType: code        
    """
    Binds to a value set if this parameter is coded (code, Coding,
    CodeableConcept).
    """
    binding: OperationDefinitionBinding        
    """
    Identifies other resource parameters within the operation invocation that are
    expected to resolve to this resource.
    """
    referencedFrom: [OperationDefinitionReferencedFrom]        
    """
    The parts of a nested Parameter.
    """
    part: [OperationDefinitionParameter]        
}