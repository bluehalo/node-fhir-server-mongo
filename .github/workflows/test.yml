name: Test

on: push

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged

    env:
      FHIR_CONTAINER_NAME: 'node-fhir-server-mongo-fhir-1'
      VERSION: '4_0_0'
      PORT: '3000'

    steps:
      - uses: actions/checkout@v4.1.7

      - name: Build
        run: |
          # Start up the docker in docker
          docker compose up -d

      - name: Wait for application to be ready
        run: |
          # Wait up to a minute for the server to start
          max_attempts=12
          attempt=0
          echo "Waiting for the application to be ready..."
          while ! docker logs "${FHIR_CONTAINER_NAME}" 2>&1 | grep "Server is up and running!"; do
            # Increment the attempt counter
            attempt=$((attempt + 1))

            # Break out of the loop after too many attempts
            if [ "$attempt" -ge "$max_attempts" ]; then
              break
            fi

            echo "Waiting..."
            sleep 5
          done
          docker ps

      - name: Extract Container IP Address
        run: |
          # Extract docker container IP address
          echo "CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "${FHIR_CONTAINER_NAME}")" >> $GITHUB_ENV

      - name: Test metadata curl request
        run: |
          # Perform GET request for metadata
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
            -H "Content-Type: application/json" \
            "http://${CONTAINER_IP}:${PORT}/${VERSION}/metadata")

          # Check if the HTTP status code is 200
          if [ "$response" -eq 200 ]; then
            echo "Request successful with status code 200."
          else
            echo "Request failed with status code $response."
            exit 1
          fi

      - name: Test new patient curl request
        run: |
          # Perform PUT request to add a new patient
          response=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
            -T sample_data/example_patient.json \
            -H "Content-Type: application/json" \
            "http://${CONTAINER_IP}:${PORT}/${VERSION}/Patient/example")

          # Check if the HTTP status code is 200
          if [ "$response" -eq 200 ]; then
            echo "Request successful with status code 200."
          else
            echo "Request failed with status code $response."
            exit 1
          fi

      - name: Test get patient curl request
        run: |
          # Perform GET request get the newly added patient
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
            -H "Content-Type: application/json" \
            "http://${CONTAINER_IP}:${PORT}/${VERSION}/Patient/example")

          # Check if the HTTP status code is 200
          if [ "$response" -eq 200 ]; then
            echo "Request successful with status code 200."
          else
            echo "Request failed with status code $response."
            exit 1
          fi

      - name: Test get patient curl request
        run: |
          # Perform GET request for a non-existing patient
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
            -H "Content-Type: application/json" \
            "http://${CONTAINER_IP}:${PORT}/${VERSION}/Patient/no_show")

          # Check if the HTTP status code is 200
          if [ "$response" -ne 200 ]; then
            echo "Request successful with status code $response (non 200)."
          else
            echo "Request failed with undesired status code 200."
            exit 1
          fi
