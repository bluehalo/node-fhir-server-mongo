name: Test

on: push

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged

    env:
      FHIR_CONTAINER_NAME: "node-fhir-server-mongo-fhir-1"

    steps:
      - uses: actions/checkout@v4.1.7

      - name: Build
        run: docker compose up -d

      - name: Wait for application to be ready
        run: |
          max_attempts=12
          attempt=0
          echo "Waiting for the application to be ready..."
          while ! docker logs "${FHIR_CONTAINER_NAME}" 2>&1 | grep "Server is up and running!"; do
            # Increment the attempt counter
            attempt=$((attempt + 1))

            # Break out of the loop after too many attempts
            if [ "$attempt" -ge "$max_attempts" ]; then
              break
            fi

            echo "Waiting..."
            sleep 5
          done
          docker ps

      - name: Extract Container IP Address
        run: |
          echo "CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "${FHIR_CONTAINER_NAME}")" >> $GITHUB_ENV

      - name: Test metadata curl request
        run: |
          # Perform the GET request and store the HTTP status code
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET -H "Content-Type: application/json" "http://${CONTAINER_IP}:3000/4_0_0/metadata")

          # Check if the HTTP status code is 200
          if [ "$response" -eq 200 ]; then
            echo "Request succeeded with status code 200."
          else
            echo "Request failed with status code $response."
            exit 1
          fi

      - name: Test curl request
        run: sh ./scripts/curlRequests/patient_get_test.sh $CONTAINER_IP

      - name: Test new patient curl request
        run: |
          # Perform the GET request and store the HTTP status code
          response=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Content-Type: application/json" -T scripts/curlRequests/example_patient.json "http://${CONTAINER_IP}:3000/4_0_0/Patient/example")

          # Check if the HTTP status code is 200
          if [ "$response" -eq 200 ]; then
            echo "Request succeeded with status code 200."
          else
            echo "Request failed with status code $response."
            exit 1
          fi

      - name: Test get patient curl request
        run: |
          # Perform the GET request and store the HTTP status code
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET -H "Content-Type: application/json" "http://${CONTAINER_IP}:3000/4_0_0/Patient/example")

          # Check if the HTTP status code is 200
          if [ "$response" -eq 200 ]; then
            echo "Request succeeded with status code 200."
          else
            echo "Request failed with status code $response."
            exit 1
          fi

      - name: Test get non-existing patient curl request
        run: |
          # Perform the GET request and store the HTTP status code
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET -H "Content-Type: application/json" "http://${CONTAINER_IP}:3000/4_0_0/Patient/ghost")

          # Check if the HTTP status code is NOT 200
          if [ "$response" -ne 200 ]; then
            echo "Request successsfully failed with status code $response."
          else
            echo "Request failed with status code $response."
            exit 1
          fi
